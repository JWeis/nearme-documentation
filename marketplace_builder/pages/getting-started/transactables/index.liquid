---
metadata_title: Transactables
slug: getting-started/transactables
---

Transactable is the core concept in our platform, which reprensts a resource around which any transaction is made. This model should be used to represent for example:

* Product - one wants to build a marketplace which match people who want to sell or rent something with the ones who want to borrow or buy it. This something is a Transactable.
* Service - one wants to build a marketplace which match people who provide services with those who want to hire them. Those services are transactables. Technically speaking, The system does not really allow to hire people per se (Users or UserProfiles) - one always need a transactable object, even if invisible from UI level
* Project - finally, one might want to build marketplace in which user has a particular idea or task, and would like to get offers from experts, and then choose one. To do this, they need to describe the task / job / project they want to be completed. This task / job / project is a Transactable.

When defining business rules, it is critical to define which roles will be able to create Transactable and what it will represent. In our example, there is more than one choice. We can say, that Developer provides services, so they can be booked on time bases (f.e. hour, day, week, month etc.). Usually in this scenario, it would be possible for developers to create multiple services - each with different price, availability etc. The expected flow in such Marketpalce would be that clients, who need developer's help, would search for them, and when they fight the right fit, they will book them. It would probably make sense during booking to ask client to provide some details about his project. Developer would have a choice then, to either confirm or reject the request.

The second option is to let client be responsible for creating transactable. In this scenario, the transactable would be a project. Most of the information the client would need to provide, he would need to fill in anyway during the booking. The expected flow in this case could be very similar. The client could search for developers, and when they find the right fit, they invite them to their project and ask for the offer. The developer can reject the request or accept it by sending an offer. Multiple developers can be invited at the same time. Once the client chooses an offer, they accept it and all others are automatically rejected. Those two flows are pretty similar, however there is an important difference - by choosing the second option, we guarantee that the client needs to fill information about the project only once. In the previous solution, if the developer rejected the request, the client would need to try to book another one, which means he would need to fill the same information again and again, until finally accepted. Another important difference is, that by using the first solution it might be challenging for allowing developers to somehow find a project to work on. It is not a problem for the second option though - one can implement search for projects, which are collected ahead of time, not during booking, and then they would be able to request to work on it.

In this guide we will demonstrate how to implement marketplace in the more complex, but also more powerful and flexible solution - the second one.
